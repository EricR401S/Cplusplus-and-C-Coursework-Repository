#ifndef __BSTMAP_H__
#define __BSTMAP_H__
#include <stdexcept>
#include "map.h"

// template<typename K, typename V>
// class Map {
//  public:
//   virtual void add(const K & key, const V & value) = 0;
//   virtual const V & lookup(const K & key) const throw(std::invalid_argument) = 0;
//   virtual void remove(const K & key) = 0;
//   virtual ~Map<K, V>() {}
// };

template<typename K, typename V>
class BstMap: public Map {


public:

  
  
};


#endif
