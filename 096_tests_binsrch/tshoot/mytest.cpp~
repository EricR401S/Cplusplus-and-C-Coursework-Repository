#include <cmath>
#include <cstdlib>
#include <iostream>
#include <string>

template<typename R, typename A>
class Function {
 public:
  virtual R invoke(A arg) = 0;
  virtual ~Function() {}
};

class QuadFunctionA : public Function<int, int> {
 public:
  int invoke(int arg) { return pow(arg, 2) + 3 * arg + 15; }
};

class QuadFunctionB : public Function<int, int> {
 public:
  int invoke(int arg) { return pow(arg, 2) - 100 * arg - 10; }
};

class LinFunctionB : public Function<int, int> {
 public:
  int invoke(int arg) { return 2 * arg + 10; }
};

class LinFunctionA : public Function<int, int> {
 public:
  int invoke(int arg) { return arg; }
};

class LinFunctionC : public Function<int, int> {
 public:
  int invoke(int arg) { return 5 * arg - 100; }
};

int find_expected_ans(Function<int, int> * f, int low, int high) {
  //int highest = f->invoke(high - 1);
  //int high = 0;
  // if (old_high >= 0) {
  //   high = old_high - 1;
  // }
  // else {
  //   high = old_high + 1;
  // }
  int highest = f->invoke(high);

  int lowest = f->invoke(low);

  if (highest > 0 && lowest > 0) {
    return low;
  }

  else if (highest < 0 && lowest < 0) {
    return high - 1;
  }

  else {
    int best_local_minimum = lowest;

    int best_local_x = low;

    //for (int i = low; i < high; i++) {
    for (int i = low; i < high; i++) {
      int result = f->invoke(i);

      if (result > best_local_minimum && result <= 0) {
        best_local_minimum = result;
        best_local_x = i;
      }
      else if (result > 0) {
        break;  // prevents infinite searching
      }
    }

    return best_local_x;
  }
}

// void check(Function<int, int> * f,
//            int low,
//            int high,
//            //int expected_ans,
//            //const char * mesg)
//            const std::string mesg) {
//   //
//   unsigned max_invocations;
//   if (high > low) {
//     max_invocations = log2(high - low) + 1;
//   }
//   else {
//     max_invocations = 1;
//   }

//   int expected_ans = find_expected_ans(f, low, high);

//   //CountedIntFn cfn = CountedIntFn(max_invocations, f, mesg);

//   bool found = false;
//   while (max_invocations > 0) {
//     if (binarySearchForZero(f, low, high) == expected_ans) {
//       found = true;
//       break;
//     }
//     max_invocations--;
//   }
//   //while(cfn.invoke(int arg)
//   //cfn.invoke(int arg)

//   if (found) {
//     return;
//   }

//   else {
//     std::cerr << "Too many function invocations in " << mesg << "\n";
//     exit(EXIT_FAILURE);
//   }
// };

int main(void) {
  LinFunctionA case1;

  std::cout << find_expected_ans(&case1, 0, 5)
            << " with range 0, 5 is the expected answer for case1\n";

  std::cout << find_expected_ans(&case1, -5, 5)
            << " with range -5,5 is the expected answer for case1\n";

  std::cout << find_expected_ans(&case1, -5, 0)
            << " with range -5,0 is the expected answer for case1\n";

  LinFunctionB case2;

  std::cout << find_expected_ans(&case2, -5, 5)
            << " with range -5, 5 is the expected answer for case2\n";

  std::cout << find_expected_ans(&case2, -10, 10)
            << " with range -10,10 is the expected answer for case2\n";

  std::cout << find_expected_ans(&case2, -20, -6)
            << " with range -20,-6 is the expected answer for case2\n";

  LinFunctionC case3;

  std::cout << find_expected_ans(&case3, 20, 25)
            << " with range 20, 25 is the expected answer for case3\n";

  std::cout << find_expected_ans(&case3, 10, 30)
            << " with range 10,30 is the expected answer for case3\n";

  std::cout << find_expected_ans(&case3, 0, 20)
            << " with range 0,20 is the expected answer for case3\n";

  std::cout << find_expected_ans(&case3, 0, 21)
            << " with range 0,21 is the expected answer for case3\n";

  exit(EXIT_SUCCESS);
}
